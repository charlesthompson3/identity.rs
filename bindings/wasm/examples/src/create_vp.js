// Copyright 2020-2021 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import {Client, Config, Timestamp, Presentation, Credential, FailFast, SignatureOptions, VerifierOptions, PresentationValidationOptions, CredentialValidationOptions, SubjectHolderRelationship} from '@iota/identity-wasm';
import {createVC} from './create_vc';

/**
 This example shows how to create a Verifiable Presentation and validate it.
 A Verifiable Presentation is the format in which a (collection of) Verifiable Credential(s) gets shared.
 It is signed by the subject, to prove control over the Verifiable Credential with a nonce or timestamp.

 @param {{network: Network, explorer: ExplorerUrl}} clientConfig
 **/
async function createVP(clientConfig) {
    // Create a default client configuration from the parent config network.
    const config = Config.fromNetwork(clientConfig.network);

    // Create a client instance to publish messages to the Tangle.
    const client = Client.fromConfig(config);

    // Creates new identities (See "createVC" example)
    const {alice, signedVcJSON} = await createVC(clientConfig);
    const signedVc = Credential.fromJSON(signedVcJSON);

    // Create a Verifiable Presentation from the Credential
    const unsignedVp = new Presentation(alice.doc, signedVc.toJSON())

    // We now sign the presentation with the holder's private key and include a challenge and an expiry timestamp 10
    // minutes from now.
    // A unique random challenge generated by the requester per presentation can mitigate replay attacks
    // (along with other properties like `expires` and `domain`). The expiry timestamp enables the
    // verifier to drop the challenge from memory after a specified amount of time has passed. 
    const signedVp = alice.doc.signPresentation(unsignedVp, {
        method: "#sign-0",
        private: alice.key.private,
    }, new SignatureOptions({
        challenge: "475a7984-1bb5-4c4c-a56f-822bccd46440"
    }))

    // Convert the Verifiable Presentation to JSON before "exchanging" with a verifier.
    const signedVpJSON = signedVp.toString();

    // Let us now look at a couple of ways that a verifier can validate the presentation. 

    // ===========================================================================
    // Validation through the high level API 
    // ===========================================================================

    // Deserialize the presentation
    const presentation = Presentation.fromJSON(signedVpJSON); 



    // Define validation options: 

    // Declare that the challenge must match our expectation: 
    const presentationVerifierOptions = new VerifierOptions( {
        challenge: "475a7984-1bb5-4c4c-a56f-822bccd46440", 
    });

    // Declare that any credential contained in the presentation are not allowed to expire within the next 10 hours:
    const earliestAllowedExpiryDate = Timestamp.nowUTC().checkedAdd(Duration.hours(10));
    const credentialValidationOptions = new CredentialValidationOptions( {
        earliestExpiryDate: earliestAllowedExpiryDate
    });

    // Declare that the presentation's holder must always be the subject of a credential in the presentation. 
    const subjectHolderRelationship = SubjectHolderRelationship.AlwaysSubject; 

    const presentationValidationOptions = new PresentationValidationOptions( {
        sharedValidationOptions = credentialValidationOptions,
        presentationVerifierOptions: presentationVerifierOptions,
        subjectHolderRelationship: subjectHolderRelationship,
    });

    // In order to validate presentations and credentials one needs to resolve the DID Documents of 
    // the presentation holder and of credential issuers. The `Resolver` provides a high level API 
    // that takes care of this for us. 
    const resolver = await new Resolver();
    

    // Validate the presentation and all the credentials included in it according to the validation options 

    const result = await resolver.verifyPresentation(
        presentation,
        presentationValidationOptions,
        FailFast.Yes
    );

    console.log(`Successful VP validation`);

}

export {createVP};
