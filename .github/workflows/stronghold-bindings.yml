name: Stronghold Bindings
env:
  DEBUG: napi:*
  APP_NAME: stronghold-nodejs # must match the package name in package.json
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  WORKING_DIRECTORY: bindings/stronghold-nodejs
on:
  pull_request:
defaults:
  run:
    working-directory: bindings/stronghold-nodejs
    shell: bash
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
            build: |
              npm run build
              strip -x *.node
          - host: windows-latest
            build: npm run build
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            architecture: x64
            docker: |
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            # TODO: figure out why yarn works, but npm doesn't
            # TODO: figure out how to make the caches work 
            build: |
              docker run --rm -v $(pwd):/build -w /build/bindings/stronghold-nodejs builder sh -c 'yarn build && strip *.node'
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   architecture: x64
          #   docker: |
          #     docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #     docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
          #   # TODO: figure out why libsodium won't build
          #   # TODO: figure out why yarn works, but npm doesn't
          #   # TODO: figure out how to make the caches work 
          #   build: |
          #     docker run --rm -v $(pwd):/build -w /build/bindings/stronghold-nodejs builder sh -c 'yarn build && strip *.node'
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              npm run build --target=aarch64-apple-darwin
              strip -x *.node
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
          architecture: ${{ matrix.settings.architecture }}

      # TODO: does 'profile: minimal' matter?
      - name: Setup Rust and cache
        uses: './.github/actions/rust/rust-setup'
        with:
          os: ${{ matrix.settings.host }}
          job: ${{ github.job }}
          current-date: 2022-02-21 # TODO use current date
     
      - name: Pull latest image
        if: ${{ matrix.settings.docker }}
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
      - name: Setup toolchain
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build
        run: ${{ matrix.settings.build }}
        working-directory: ${{ matrix.settings.docker && './' || env.WORKING_DIRECTORY }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.APP_NAME}}-bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIRECTORY }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '16'
          - '18'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{env.APP_NAME}}-bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIRECTORY }}
      - name: List packages
        run: ls -R .
      - name: Test bindings
        run: npm run test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{env.APP_NAME}}-bindings-x86_64-unknown-linux-gnu
          path: ${{ env.WORKING_DIRECTORY }}
      - name: List packages
        run: ls -R .
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim npm run test
  # test-linux-x64-musl-binding:
  #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '16'
  #         - '18'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #     - name: Install dependencies
  #       run: npm ci --ignore-scripts
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{env.APP_NAME}}-bindings-x86_64-unknown-linux-musl
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine npm run test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
    #  - test-linux-x64-musl-binding
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.WORKING_DIRECTORY }}/artifacts
      - name: Move artifacts
        run: npm run artifacts
      - name: List packages
        run: ls -R ./npm
      # - name: Publish
      #   run: |
      #     if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --access public
      #     elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --tag next --access public
      #     else
      #       echo "Not a release, skipping publish"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # TODO: why would this be needed?
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
