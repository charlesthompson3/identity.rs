name: Stronghold Bindings
env:
  DEBUG: napi:*
  APP_NAME: stronghold-nodejs # must match the package name in package.json
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  WORKING_DIRECTORY: bindings/stronghold-nodejs
on:
  pull_request:
defaults:
  run:
    working-directory: bindings/stronghold-nodejs
    shell: bash
jobs:
  build-stronghold-nodejs:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
            build: |
              npm run build
              strip -x *.node
            test: |
              npm run test
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
            build: |
              npm run build
            test: |
              npm run test
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            architecture: x64
            build: |
              npm run build && strip *.node
            test: |
              npm run test
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            architecture: x64
            setup: |
              sudo apt-get install -y musl-tools
            build: |
              npm run build --napi_args=--target=x86_64-unknown-linux-musl && strip *.node
            test-docker: |
              docker build -f bindings/stronghold-nodejs/build/Dockerfile.alpine -t tester .
              docker run --rm -v $(pwd):/build -w /build/bindings/stronghold-nodejs tester sh -c "readelf -d stronghold-nodejs.linux-x64-musl.node && npm run test"
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              npm run build --napi_args=--target=aarch64-apple-darwin
              strip -x *.node
            test: |
              npm run test
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
          architecture: ${{ matrix.settings.architecture }}

      # TODO: does 'profile: minimal' matter?
      - name: Setup Rust and cache
        uses: './.github/actions/rust/rust-setup'
        with:
          os: ${{ matrix.settings.host }}
          job: ${{ github.job }}
          target: ${{ matrix.settings.target }}

      # TODO: get rid of this
      - name: Build Wasm bindings
        run: |
          npm i
          npm run build
        working-directory: ./bindings/wasm
     
      - name: Setup
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build
        run: ${{ matrix.settings.build }}

      - name: List packages
        run: ls -R .

      - name: Test bindings
        if: ${{ matrix.settings.test }}
        run: ${{ matrix.settings.test }}

      - name: Test bindings in docker
        if: ${{ matrix.settings.test-docker }}
        run: ${{ matrix.settings.test-docker }}
        working-directory: ./

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.APP_NAME}}-bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIRECTORY }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-stronghold-nodejs
    steps:

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.WORKING_DIRECTORY }}/artifacts

      - name: Create npm folder
        run: npm run create-npm-folder

      - name: Move artifacts
        run: npm run artifacts

      - name: List packages
        run: ls -R ./npm
        
      # - name: Publish
      #   run: |
      #     if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --access public
      #     elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --tag next --access public
      #     else
      #       echo "Not a release, skipping publish"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # TODO: why would this be needed?
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
